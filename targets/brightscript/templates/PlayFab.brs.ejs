function PlayFab() as object
	if m.PlayFab = invalid
		m.PlayFab = {
			Settings: {
				TitleID: invalid,
				AsyncEnabled: false,
				DebuggingEnabled: false,
				Timeout: 20000,
				DeveloperSecretKey: invalid
			}
			_internalSettings: {
				SdkVersionString: "<%- sdkVersion %>",
				PlayFabID: invalid,
				SessionTicket: invalid,
				EntityID: invalid,
				EntityType: invalid,
				EntityToken: invalid,
				GetServerURL: invalid,
				ErrorTitleId: "Must have PlayFab.Settings.TitleID set to call this method",
				ErrorLoggedIn: "Must be logged in to call this method",
				ErrorEntityToken: "You must successfully call GetEntityToken before calling this",
				ErrorSecretKey: "Must have PlayFab.Settings.DeveloperSecretKey set to call this method"
			}
			<% for(var i in apis) { var apiName = apis[i].name;
			%><%- apiName %>Api: PlayFab<%- apiName %>SDK(),
			<% } %>Post: invalid,
			Wait: invalid
		}

		m.PlayFab._internalSettings.GetServerURL = function(methodUrl as string) as string
			return "https://" + PlayFab().Settings.TitleID + ".playfabapi.com" + methodUrl
		end function

		m.PlayFab.Post = function(url_path, request, auth_key = invalid, auth_val = invalid, extra_headers = invalid) as dynamic
			play_fab = PlayFab()
			url = play_fab._internalSettings.GetServerURL(url_path)
			json = FormatJSON(request)

			if PlayFab().Settings.DebuggingEnabled
				print "::PlayFab:: Sending Request " + url_path + " " + json
			end if

			message_port = CreateObject("roMessagePort")
			transfer = CreateObject("roUrlTransfer")
			transfer.SetMessagePort(message_port)
			transfer.SetCertificatesFile("common:/certs/ca-bundle.crt")
			transfer.InitClientCertificates()
			transfer.SetUrl(url)

			if extra_headers <> invalid
				for each key in extra_headers
					transfer.AddHeader(key, extra_headers[key])
				end for
			end if
			transfer.AddHeader("Content-Type", "application/json")
			transfer.AddHeader("X-ReportErrorAsSuccess", "true")
			sdk_version = PlayFab()._internalSettings.SdkVersionString
			if sdk_version <> invalid
				transfer.AddHeader("X-PlayFabSDK", sdk_version)
			end if
			if auth_key <> invalid and auth_val <> invalid
				transfer.AddHeader(auth_key, auth_val)
			end if

			sent_successfully = transfer.AsyncPostFromString(json)
			post = {
				Transfer: transfer,
				Result: invalid,
				IsAsync: play_fab.Settings.AsyncEnabled,
				SentSuccessfully: sent_successfully
			}

			if not post.IsAsync and post.SentSuccessfully
				PlayFab().Wait(post)
			end if

			return post
		end function

		m.PlayFab.Wait = function(post as object)
			message_port = post.Transfer.GetMessagePort()
			timer = CreateObject("roTimeSpan")
			timeout = PlayFab().Settings.Timeout
			waiting = true
			while waiting
				message = message_port.GetMessage()
				if message <> invalid
					post.Result = message
					waiting = false
				end if
				if timer.TotalMilliseconds() > timeout
					waiting = false
				end if
			end while
		end function
	end if

	return m.PlayFab
end function

<% for(var i in apis) { var apiName = apis[i].name;
%>function PlayFab<%- apiName %>Api() as object
	return PlayFab().<%- apiName %>Api
end function

<% } %>
